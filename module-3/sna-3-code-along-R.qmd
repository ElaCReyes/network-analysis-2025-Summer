---
title: "Components, Cliques, and Key-Actors"
subtitle: "SNA Module 3: Code-Along"
format:
  revealjs: 
    slide-number: c/t
    progress: true
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: img/LASERLogoB.png
    #theme: Cosmo
    theme: [default, css/laser.scss]
    width: 1920
    height: 1080
    margin: 0.05
    footer: <a href=https://www.go.ncsu.edu/laser-institute>go.ncsu.edu/laser-institute
knitr:
  opts_chunk:
    out.width: "90%"
    out.height: "90%" x
    fig-align: center
highlight-style: a11y
resources:
  - demo.pdf
bibliography: lit/references.bib
editor: visual
---

## Overview

1.  **Prepare**: Review the [#COMMONCORE](https://www.hashtagcommoncore.com) project including questions, data, and key findings.

2.  **Wrangle**: Revisit basic techniques for manipulating, cleaning, transforming, and merging network data.

3.  **Explore**: Calculate some key measures for individuals in our network and illustrate key actors through network visualization.

4.  **Model**: Introduce community detection algorithms for identifying groups.

5.  **Communicate**: Discuss website as a format for sharing findings.

::: notes
**Speaker Notes:**
:::

# Prepare

Introduction to #COMMONCORE

```{r, echo=FALSE, results='hide', message=FALSE, warning=FALSE}


```

## Guiding Study

::: panel-tabset
### Context

::: columns
::: {.column width="70%"}
Our third SNA learning lab is inspired by the [#commoncore Project](https://www.hashtagcommoncore.com/), which examined the intense debate surrounding the Common Core State Standards education reform as it played out on Twitter.
:::

::: {.column width="30%"}
![#COMMONCORE [@supovitz2017commoncore]](img/commoncore.jpg)
:::
:::

### Questions

The central question guiding the #COMMONCORE Project was:

> How are social media-enabled social networks changing the discourse in American politics that produces and sustains education policy?

### Data

-   The authors used Twitter's (now X's, now sadly defunct) Application Programming Interface (API) based on tweets using specified keywords, keyphrases, or hashtags and then restricted their analysis to the following terms: commoncore, ccss and stopcommoncore.

-   They also captured Twitter profile names, or user names, as well as the tweets, retweets, and mentions posted.

### Findings

-   In Act 1, The Giant Network, the authors **identified five major sub-communities**, or factions, including: (1) supporters, (2) opponents inside education, and (3) opponents outside of education.

-   In Act 2, Central Actors, they noted that most of these participants were casual contributors and distinguished between two types of **central actors** on Twitter: Transmitters and Transceivers.
:::

::: notes
**Speaker Notes:**
:::

# Wrangle

Import, Inspect, and Tidy Network Data

::: notes
**Speaker Notes:**
:::

## Inspect Data

::: panel-tabset
### Load Libraries

Let's start by creating a new R script and loading the following packages introduced in previous modules:

```{r}
library(tidyverse)
library(igraph)
library(tidygraph)
library(ggraph)
```

```{r load-libraries, echo=TRUE, message=FALSE}
library(tidyverse)
library(igraph)
library(tidygraph)
library(ggraph)

# You may have to install this package if it is not listed in your packages pane.
# install.packages(tidyverse) 
```

### Import Data

Run the following code to use the `read_csv()` function from the {readr} package to read the `ccss-tweets-fresh.csv` file from the data folder and assign to a new data frame named `ccss_tweets`:

```{r}
ccss_ties <- read_csv("data/ccss-edgelist.csv")
ccss_nodes <- read_csv("data/ccss-nodelist.csv")
```

``` r
ccss_ties <- read_csv("module-1/data/ccss-edgelist.csv")
ccss_nodes <- read_csv("module-1/data/ccss-nodelist.csv")
```

### Inspect Data

Now let's take a look at the data file we just imported using the View() function or another function of choice you may have learned in the Foundations Labs:

<br>

``` r
view(ccss_ties)
view(ccss_nodes)
```

### Discuss

Think about the questions below and be prepared to share your response:

1.  What do you think the rows and columns in each file represent?

2.  What about the values in each cell represent?

3.  What else do you notice about the data?

4.  What questions do you have?
:::

::: notes
**Speaker Notes:**
:::

## Tidy Data

::: panel-tabset
### tbl_graph() function

The tbl_graph() function creates a special network data structure called a "tidy graph" that combines our nodes and edges into a single R object. Run the following code in your R script:

```{r}
ccss_network <- tbl_graph(edges = ccss_ties,
                          nodes = ccss_nodes, 
                          directed = TRUE)
```

### Inspect Graph

Using your R script, type the name of network object we just created and run the code to produce the output on the next tab:

``` r
# YOUR TURN
#
#
```

### View Sociogram

``` r
ggraph(ccss_network, layout = "fr") + 
  geom_edge_link(arrow = arrow(length = unit(1, 'mm')), 
                 end_cap = circle(3, 'mm'),
                 start_cap = circle(3, 'mm'),
                 alpha = .1) +
  geom_node_point(aes(size = local_size())) +
  geom_node_text(aes(label = actors,
                     size = local_size()),
                 repel=TRUE) +
  theme_graph()
```

### Output

```{r}
ggraph(ccss_network, layout = "fr") + 
  geom_edge_link(arrow = arrow(length = unit(1, 'mm')), 
                 end_cap = circle(3, 'mm'),
                 start_cap = circle(3, 'mm'),
                 alpha = .1) +
  geom_node_point(aes(size = local_size())) +
  geom_node_text(aes(label = actors,
                     size = local_size()),
                 repel=TRUE) +
  theme_graph()
```

### Discuss

Think about the questions below:

1.  What is size of our CSSS twitter network?

2.  Does our network contain any obvious groups?

3.  What insights have gained about out network so far?

4.  What questions do have about have about out network so far?
:::

# Explore

Components, Cliques, & Key Actors

::: notes
**Speaker Notes:**
:::

## Components

::: panel-tabset
### Definition

One of the most basic ways researchers can characterize a network's substructure is to identify its components.

<br>

> A **component** is a connected subgraph in which there is a path between all pairs of nodes.

<br>

Recall from our output above that our directed "multigraph" had 13 components.

### Quick Look

A weak component, as illustrated by the graph generated by the code below, ignores the direction of a tie:

<br>

```{r auto-graph, echo=TRUE, message=FALSE, warning=FALSE, fig.show='hide'}
autograph(ccss_network)
```

<br>

Strong components do not. In other words:

> **Strong components** consist of nodes that are connected to one another via both directions along the path that connects them.

### Output

```{r}
autograph(ccss_network)
```

### Implementation

The {igraph} package has a simple `components()` function for identifying the number of components in a network, the size of each component, and which actors belong to each.

<br>

```{r strong-component, echo=TRUE, results='hide'}
components(ccss_network, mode = c("strong"))
```

<br>

How many "strong" components are in our network?

### Interpret

```{r}
components(ccss_network, mode = c("strong"))
```
:::

## Cliques

::: panel-tabset
## Definition

Examining cliques is one bottom-up approach that reveals how groups are distributed in the network and which actors belong to which groups.

<br>

> A clique is a maximally connected subgraph of nodes (\> 2) in which all nodes are connected to each other.

## Clique Number

Similar to our component analysis, the {igraph} function has a super simple `clique_num()` function for identifying number of completely connected subgroups in a network:

<br>

``` r
clique_num(ccss_network)
```

<br>

As you probably saw above, the `clique_num()` function does not take into account directionality of our ties. It looks like we have 3 clusters of at least 3 actors that all have ties to one another.

## Implementation

The {igraph} function also has a simple `cliques()` function for identifying members who belong to the same group.

<br>

Let's see if there are any cliques that contain a minimum of 3 nodes?

<br>

``` r
cliques(ccss_network, min = 3, max = NULL)
```

## Interpret

```{r}
cliques(ccss_network, min = 3, max = NULL)
```
:::

## Key Actors

::: panel-tabset
### Degree

As we learned in our previous lab, a key structural property of networks is the concept of centralization.

<br>

One of the most common descriptives reported in network studies and a primary measure of centralization is **degree**.

<br>

> **Degree** is the number of ties to and from an ego. In a directed network, in-degree is the number of ties received, whereas out-degree is the number of ties sent.

### Activate Nodes

The {tidygraph} package has an aptly named function `centrality_degree()` for calculating degree, in-degree, and out-degree for all actors in a network.

<br>

To use it, we'll need to `activate()` our `nodes` and create a new node-level variable using `mutate()` from the {dplyr} package:

<br>

```{r}
#| echo: true

ccss_network <- ccss_network |>
  activate(nodes) |>
  mutate(in_degree = centrality_degree(mode = "in"),
         out_degree = centrality_degree(mode = "out"))

```

### View Network

Let's take a look at our network now.

<br>

```{r}
#| echo: true
ccss_network

```

### Your Turn

Using your R script, see if you can figure out which twitter user received the most replies/mentions (transceivers) and which user replied/mentioned to the most users (transmitters):

<br>

``` r
# YOUR TURN
#
#
```

<br>

ðŸ’¡**Hint**: Consider using the activate() function again along with standard {dpylr} functions for arranging columns by order.

### Answer

```{r}
#| echo: true
ccss_network |>
  activate(nodes) |>
  arrange(desc(out_degree))

```
:::

## What's Next?

-   **SNA Case Study**: Hashtag Common Core

-   **Guiding Study**: [The #COMMOCORE Project](https://www.hashtagcommoncore.com) [@supovitz2017commoncore]

## Acknowledgements

::: columns
::: {.column width="20%"}
![](img/nsf.jpg){fig-align="center" width="80%"}
:::

::: {.column width="80%"}
This work was supported by the National Science Foundation grants DRL-2025090 and DRL-2321128 (ECR:BCSER). Any opinions, findings, and conclusions expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.
:::
:::

## References
